


###about binary search
1. always do: mid = l + (r-l) // 2
2. mid could be the same as l; So whenever we update l, we need l = mid + 1; r = mid
3. the final answer could be index "l" so we should return answer(l) if bla else none

二分查找真正在于到底要给 mid 加一还是减一，while 里到底用 <= 还是 <。

我们决定：while (left < right)
永远取左边=0,右边等于len（）。如果条件运行，我们再看[l,r) or (l,r].
在run while之前，先判定一次能不能取到0或者len
要永远return 能取到mid的那个bound。

search LEFT bound, target is the left bound: return left;最好可以取[l, r)
1. initialize: left=0, right = len(nums)
2. Since we cannot reach right, we MUST search in [left, right)
3. Then we must while (left < right)
4. Then we must left = mid , right = mid-1

search RIGHT bound, target is the right bound.最好可取(l,r]
注意，对于insert一个数字这个问题，右边是可以取到len的
1. initialize: left=0, right = len(nums)
2. Since we cannot reach left, we MUST search in (left, right)
3. Then we must while (left < right)
4. Then we must left = mid + 1, right = mid

class Sorting(object):
    def getIndex_left(self, nums, target):
        ## nums in descending, 
        ## find the index where to insert target
        ## if target == some elt in nums, find the smallest index to insert target
        
        l, r = 0, len(nums)
        if target >= nums[0]:
            return 0
        while l<r: # return r
            mid = l + (r-l) // 2
            
            if target> nums[mid]:
                r = mid
            elif target < nums[mid]:
                l = mid + 1
            elif target == nums[mid]:
                r = mid - 1
        return r
    def getIndex_right(self, nums, target):
        ## nums in descending, 
        ## find the index where to insert target
        ## if target == some elt in nums, find the largest index to insert target
        
        l, r = 0, len(nums)
        if target <= nums[-1]:
            return len(nums)
        
        while l<r: # return r
            mid = l + (r-l) // 2
            
            if target> nums[mid]:
                r = mid
            elif target < nums[mid]:
                l = mid + 1
            elif target == nums[mid]:
                l = mid + 1
        return r


'''
int binarySearch(int[] nums, int target) {
    int left = 0, right = ...;

    while(...) {
        int mid = left + (right - left) / 2;
        if (nums[mid] == target) {
            ...
        } else if (nums[mid] < target) {
            left = ...
        } else if (nums[mid] > target) {
            right = ...
        }
    }
    return ...;
}
'''