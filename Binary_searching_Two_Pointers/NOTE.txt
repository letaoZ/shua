1. always do: mid = l + (r-l) // 2
2. mid could be the same as l; So whenever we update l, we need l = mid + 1; r = mid
3. the final answer could be index "l" so we should return answer(l) if bla else none

二分查找真正在于到底要给 mid 加一还是减一，while 里到底用 <= 还是 <。
寻找一个数、寻找左侧边界、寻找右侧边界。
细节:
    比如不等号是否应该带等号，
    mid 是否应该加一
分析这些细节的差异以及出现这些差异的原因，保证你能灵活准确地写出正确的二分查找算法。
NOTE: 分析二分查找的一个技巧是：不要出现 else，而是把所有情况用 else if 写清楚，这样可以清楚地展现所有细节

'''
int binarySearch(int[] nums, int target) {
    int left = 0, right = ...;

    while(...) {
        int mid = left + (right - left) / 2;
        if (nums[mid] == target) {
            ...
        } else if (nums[mid] < target) {
            left = ...
        } else if (nums[mid] > target) {
            right = ...
        }
    }
    return ...;
}
'''